If you're reading this, you might be interested in trying out the following new features. Comments are welcome (J@newosxbook.com), as are feature requests


06/25/13:
---------
 --sig 
 --ent

06/29/13:
---------
 -S -v  - shows not only nm(1) style symbols, but the libraries they are taken from
 dyldinfo's -opcodes is supported
 Jtool now handles fat binaries on Linux just fine.

07/05/13:
---------

 Jtool now supports dyld shared caches (try running against  /var/db/dyld/dyld_shared_cache_x86_64)
 (Extraction still not there yet)

07/09/13:
---------

  New option: --pages - to do as pagestuff(1) does (only better)

07/12/13:
---------
	
  Minor bugfixes (for 32-bit Intel), updated Linux (ELF) Binary
 

07/18/13:
---------

IMPORTANT changes in JTool's disassembler:

  1) JTool now dumps CFStrings! If you -d an address in _cfstring section, or disassemble, and a register is detected to point to a CFString, it will be resolved to its CFString value. REALLY useful for reverse engineering.

  2) LC_FUNCTION_STARTS now processed during disassembly, so as to print function starting points. If the function addresses do not have a symbol associated with them (as, alas, is the case with most iOS binaries), jtool generates a func_xxxx name (similar to IDA). A future version will auto-symbolicate in a .dSYM file (once I figure out what the #$%#$% Mach-O Dwarf format is)

  3) Last, but by far NOT least: JTool now correctly resolves stubs in disassembly! This will show external (dylib) function calls. This puts JTool on par with otool (grrrr) and IDA. In fact, seeing as JTool resolves PC relative and neither of the other two do, it might just come a bit ahead.

07/19/13:
---------

Color was always the default, but because disassembly output is volumous, it was disabled when piping. Now, thanks to "less -R", you can also specify JCOLOR=1, to bring back color if whatever you pipe to can handle the escape sequences. You should still use less(1) rather than more(1), because it enables paging up. Less really is more :-)

08/07/13: 
---------

Minor bug fixes. Improved ARM Assembly (still need STMFD/IA..)


08/09/13:
---------

dyldinfo assimilation is one step closer: Jtool now supports -data_in_code - and also takes the DiC areas into account when disassembling (i.e. when using -d, you will automatically see DCD ..... ; DATA_IN_CODE for these areas). This also makes it rather useful when -d is piped to "grep DATA_IN_CODE".

08/16/13:
---------

- The more esoteric LCs of UPWARD_DYLIB and SUB_FRAMEWORK/CLIENT/LIBRARY are now supported. This is useful for /usr/lib/system/*.dylib.
- Fixed bug which prevented parsing of LINKEDIT in fat binaries. Now -v -S works everywhere
- LINKEDIT exports now handled partially. More will come once I grapple with this terrible trie notation

08/18/13:
---------

- x86_64 disassemble still not supported, but other dumping features (cstrings, cfstrings, etc) are. Also dump of strings now escapes \r \n, etc.
 
- jtool -S output is now virtually identical to that of nm -p (using symbol table ordering). -v offers more options nm doesn't, such as seeing symbol offset and which library it is linked to. Using -S with -v also breaks compatibility with nm, as it now shows "R/r" on read only symbols, same as ELF's nm.

- Hack for objc_msgsend to show arguments in disassembly. Useful for debugging objc binaries (such as iOS Apps). Still not where I want it to be, but constantly improving.

12/26/13: (Wow, it's been a while..)
---------

  - More ARMv7 commands supported. Working on ARMv8 now
  - CFStrings now printed
  - Fixed LC_REEXPORT_DYLIB bug messing up jtool -S -v (finding which libraries export symbols)
  - Added Indirect (re-exported), in honor of evasi0n7's brilliant exploit (Guys - you rock)

01/19/13:
---------

  - Fixed LC_ROUTINES_64 bug
  - (slightly) better ARM disassembly. Still working on ARM64

01/22/13:
---------

  - Fixed nasty bug with wrong sym/section for FAT file. Thanks to unnamed developer from promising security company.
  - jtool -v -l now prints permissions correctly
  - jtool -d auto-dumps CStrings (and CFStrings) if the section they are in is marked as such

02/07/13: v0.5
---------

  - Minor refactoring, only 13 warnings on compilation
  - Search (-F, -Fs) now works well with FAT files as well
  - Peek (-p) at address works better (also -p -v)
  - LOAD_UPWARD_DYLIB now correctly handled for jtool -S -v (i.e. symbols are found in upward dylibs, too)
  - Fixed both peek and dump so as to refuse PAGEZERO (rather than crash! :)

02/25/13: v0.5.1
---------

   - Finally showing EncrYPtion info :)
   - Fixed printing of CFStrings
   - Fixed section names of 16 characters (used to overflow and print segment name - but no more)
   - Fixed shared cache handling, for ARM binary

03/15/13: v0.5.2
---------

   - The -rC (remove load command #) option now enables you to remove load commands. This is useful for stripping
      code signatures, for example, or just plain malforming Mach-O Binaries.
   - jtool -h -v now actually prints the Mach-O header flags!
   - export JCOLOR=0 will disable color output, always (though IMHO colors are great, for disassembly)
   - Man page updated (do you people read this stuff?)
  
03/22:13: v0.6
---------

   - Massive restructuring of disassembly engine, refactoring, working on ARMv8 (64)
   - 64 bit dumping fixed (>= vs. > bug. (*sigh*) )
   - Core file support (at least, x86_64 - ARM coming soon)


09/07/14: v0.7:
---------
  
    - Back in business. Segment extraction bug fixed
    - Compiles with only 12 warnings..
    - Code signing refactored and greatly extended:
       - Fixed crash getting entitlement when no LC_CODE_SIGNATURE present
       - Code Signatures now displayed (-sig) *and* verified (-sig -v)

09/21/14: v0.75:
---------

    - -extract can now extract a file from a shared cache, like KennyTM's decache (but with support for more load commands) AND 64-bit caches!

	to use: ./jtool -extract IOSurface /Volumes/Okemo12A365.N94OS/System/Library/Caches/com.apple.dyld/dyld_shared_cache_armv7
		(or whereever your dyld cache is).

10/01/14: v 0.75.1 
--------- 
         minor fix to display page slots for code signing (thanks, duhanebel!)

10/04/14: v 0.76:
---------

    - Can now validate bound info plists (as __TEXT.__info_plist) and CodeResources. If you specify a file pathname which 
      contains Contents/MacOS, these will be found automatically. Else - you might need to specify --appdir xxxx
      to point to the Contents/ of the app (.. notation is fine).

10/12/14: v0.77:
---------

     - More ARM Thumb codes finally handled
     - puts, printf (kind of) decompiled
     - shared cache extraction fixed
     - Disassembling a symbol will automatically disassemble until next symbol
     - Memory reqs for disassembly brought down to O(1) instead of O(n) (no disassembly history)
     - LC_UNIXTHREAD now handles ARM64 (only useful for the A7+ kernels, since apps use LC_MAIN, but useful)

10/21/14: v0.78:
---------
     - Added -opcodes with semantics for disassembly (that is, dump opcodes, like otool's -j)
     - Fixed bug resolving 64 bit symbols (would fail if STAB symbols were set, like in AMFI.kext...)
     - ARM64 branches handled
     - Objective-C enhancements - can print category, protocol list and more (try -d __DATA.__objc_...)
     - Can now work directly on shared library cache - use path_to_cache:fileInCache to specify
	- will work with -l, not with -d or -S  yet
	

11/25/14: v0.8
---------
     - Massive fixes in dyldinfo like functionality, for 64-bit
     - Can specify "all" for extract (i.e. jtool -extract all _path_to_dyld)
     - ARM64 binaries now disassembled with call stubs (still working on disassembly though)
     - CFString dumping fixed for 64-bit binaries
     - DYLD Bindings now correctly figured out including TIMES_ULEB (bleh!) and SET_ADDEND_SLEB
     - Fixed bug in FUNCTION_STARTS - now points to start of text, so -d can figure out functions by start
     - jtool -S should now be entirely indistinguishable (not just virtually identical to) from nm
     - Fix for cases where segment or section mapping is past file offset
     - Corrected '-d -...' usage bug

01/30/14: v0.85

     - CBNZ, CBZ work
     - ADD now does sf (W or X regs)
     - CMP fixed, both for CMP shifted and CMP immediate
     - Now supports .jtool files. Jtool will generate a <binaryName>.arch.uuid.jtool file (don't worry, the uuid part is automatically generated), which you can add symbols to, if you specify -S[*] arguments (** Not in release version **)


04/01/14: v0.86

     - Tool made significantly faster (alas, still x5 times slower than otool.. But at least not x70! And x5 is understandable, I guess, given more features)
     - Now prints __TEXT.__cstring automatically. @TODO: do so by section flags, not section reserved name
     - jtool -L now does NOT print LC_ID_DYLIB - and only prints dependencies (in this way it breaks compatibility with otool -L, but makes more sense - who wants to see the library name itself repeated?!)



04/14/14: v0.88

     - Fixed crash on extraction from shared cache (thanks to libgmalloc!)
 
======================================================

@TODO:  (still)
------
       - Fix on ZeroFill sections?
	- Fix DecodeBitMasks (needed for ORR and friends .. currently args still show 0, which is clearly wrong)
       - Lookup symbol for every address - by caching, and holding ptr to next sym
       - Fix ARM64STP
bash-3.2# otool -j -tV ~/Documents/RE/SpringBoard64 | grep 1eabc 
000000010001eabc        a9bf7bfd                stp     fp, lr, [sp, #-16]!
       - Remove LCs (reverse mapping to remove by name or 0x), also remove code signature
       - sign binaries (ldid exec()s codesign, which doesnt work on iOS - almost there - expect that in v0.9)
       - Embed entitlements(!)
       - Known Functions.txt
       - Objective C class linking(!)
       - Swift/c++ demangling
       - Update functions in companion .jt (for now) or .dSYM (later)

       - Fix operation in files in cache

       - Fix ARM64 Symbol stubs - done
     

	taig b50c 0x01f1a4 sub.w r8,r4 , 1     

